#!/usr/bin/env coffee

sys = require 'sys'
fs = require 'fs'
path = require 'path'

[command, task] = process.argv[2..3]
yesterday = "yesterday" in process.argv

class TaskList
  constructor: (yesterday) ->
    @date = new Date
    @date.setDate @date.getDate() - 1 if yesterday
    @date = @date.toDateString()

    @file = "#{process.env.HOME}/.doit"

    try
      @data = if path.existsSync(@file)
        JSON.parse fs.readFileSync(@file)
      else
        tasks: [], completions: {}
    catch error
      sys.puts "There was a problem reading your .doit file: '#{error}'"
      process.exit 1

    @tasks = @data.tasks
    @completed = @data.completions[@date] || []

  save: ->
    fs.writeFile @file, JSON.stringify(@data, undefined, 2), (err) ->
      sys.puts "ERROR: #{err}" if err

  print: ->
    sys.puts ""
    if @tasks.length == 0
      sys.puts "(use `doit add <task>` to add a task)"
    unless @date == (new Date).toDateString()
      sys.puts "  #{@date}\n"
    for task in @tasks.sort()
      sys.puts "  #{ if task in @completed then "X" else "_" } #{task}"
    sys.puts ""

  add: (task) -> @tasks.push(task) unless task in @tasks

  did: (task) ->
    @completed = (@data.completions[@date] ?= [])
    @completed.push(task) unless task in @completed

tasks = new TaskList(yesterday)

switch command
  when "add"
    tasks.add task
  when "did"
    tasks.did task

tasks.print()
tasks.save()

